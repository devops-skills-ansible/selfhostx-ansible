    # Disable broken TLS precursors. (Newer nginx versions already disable SSLv3.0 by default, but it doesn't hurt to be explicit.)
    # If this is an internal server and you don't have to support legacy clients, try disabling TLS 1.0 and TLS 1.1, too!
    ssl_protocols {{ nginx_ssl_protocols }};

    # Don't let clients pick the cipher suite, it's insecure. Let the server pick the strongest one supported by the client.
    ssl_prefer_server_ciphers {{ ssl_prefer_server_ciphers }};

    # https://serverfault.com/questions/417512/disable-deflate-compression-in-nginx-ssl/417557#417557
    # SSL compression is turned off by default in nginx 1.1.6+/1.0.9+ (if OpenSSL 1.0.0+ used) and nginx 1.3.2+/1.2.2+ (if older versions of OpenSSL are used).
    # If you see SSL compression, you probably want to upgrade nginx.
    # Another obvious solution is to recompile OpenSSL without zlib compression support (which is actually the default).

    # Debug these cipher suite strings with 'openssl ciphers -v <string>', `man (1) ciphers` is also helpful.
    # Bonus round: if you feel like it, enable and prefer Chacha20-Poly1305 stream cipher (TLS 1.3 preview):
    ssl_ciphers {{ nginx_ssl_ciphers }};

    # See here about safety of elliptic curves: https://safecurves.cr.yp.to/
    # Pick strong curves for ECDHE key exchange (keep in mind that all commonly used curves in TLS <= 1.2 came from the NSA):
    # Bonus round: if you feel like it, enable and prefer the new Ed25519 curve (TLS 1.3 preview):
    ssl_ecdh_curve {{ nginx_ssl_cedh_curve }};

    # Diffie Hellman parameters for DH(E) key exchange.
    # Generate these using our ansible role diffie_hellman_parameters or manually using 'openssl dhparam -outform PEM -out /etc/ssl/private/dhparam2048.pem 2048'. Make sure to set appropiate access rights!
    # DH param size should match RSA key size, so if you use RSA 4096 make sure you use 4096 bit DH params, too! (Some legacy clients will choke on 4096 bit DH though.)
    ssl_dhparam "{{ nginx_dh_filename }}";

{% if nginx_tls_hsts_enable %}
    # HSTS (ngx_http_headers_module is required) (63072000 seconds: 1 year)
    add_header Strict-Transport-Security "max-age={{ nginx_tls_hsts_time }}";
{% endif %}

    # Enable tls session cache and tickets, so clients can re-use their existing tls session in multiple successive tcp sessions.
    ssl_session_cache shared:SSL:10m;
    ssl_session_tickets on;
    ssl_session_timeout 30m;

    # Enable OCSP stapling.
    ssl_stapling on;
    ssl_stapling_verify on;

{% if nginx_ssl_trusted_certificate_enabled and nginx_ssl_trusted_certificate_file is defined and ssl_trusted_certificate_file|length>0 %}
    # verify chain of trust of OCSP response using Root CA and Intermediate certs
    ssl_trusted_certificate nginx_ssl_trusted_certificate {{ nginx_ssl_trusted_certificate_file }};
{% endif %}

    # For a resolution of the OCSP responder hostname, the resolver directive should also be specified.
{% if nginx_ocsp_resolver_enabled %}
    resolver {{ nginx_ocsp_resolver_list }};
{% else %}
    # resolver {{ nginx_ocsp_resolver_list }};
{% endif %}
