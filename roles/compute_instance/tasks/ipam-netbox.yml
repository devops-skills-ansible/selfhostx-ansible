---
# https://docs.ansible.com/ansible/latest/collections/netbox/netbox/

# proxmox
- name: Netbox for proxmox
  # cloud-init iso needed if no shared filesystem and if its not a cluster
  delegate_to: "{{ proxmox_create_node_ansible | default(proxmox_create_node) }}"
  run_once: true
  when:
    - compute_instance_virtualization_provider  == "proxmox"
  block:

    - name: Prefix name given - lookup prefix address in netbox and set network config as fact (v4)
      # debug: "result is {{ item.value.prefix }}"
      ansible.builtin.set_fact:
        proxmox_network_prefix_v4_full: "{{ item.value.prefix }}"
      loop: "{{ query('netbox.netbox.nb_lookup', 'prefixes', api_filter=netbox_api_query_filter, api_endpoint=netbox_url, token=netbox_token, validate_certs=netbox_validate_certs) }}"
      vars:
        netbox_api_query_filter: "description={{ compute_instance_ip_v4 }} family=4"
      when:
        - compute_instance_ip_v4 != "no"
        - compute_instance_ip_v4_is == "name"
        - netbox_prefix_name_query_method == "netbox_description"
      register: netbox_result_prefix_v4

    - name: Prefix name given - lookup prefix address in netbox and set network config as fact (v6)
      # debug: "result is {{ item.value.prefix }}"
      ansible.builtin.set_fact:
        proxmox_network_prefix_v6_full: "{{ item.value.prefix }}"
      loop: "{{ query('netbox.netbox.nb_lookup', 'prefixes', api_filter=netbox_api_query_filter, api_endpoint=netbox_url, token=netbox_token, validate_certs=netbox_validate_certs) }}"
      vars:
        netbox_api_query_filter: "description={{ compute_instance_ip_v6 }} family=6"
      when:
        - compute_instance_ip_v6 != "no"
        - compute_instance_ip_v6_is == "name"
        - netbox_prefix_name_query_method == "netbox_description"
      register: netbox_result_prefix_v6

    - name: IP given - lookup prefix address and and set network config as facts (v4)
      ansible.builtin.set_fact:
        proxmox_network_prefix_v4_full: "{{ compute_instance_ip_v4 | ansible.utils.ipaddr('network/prefix') }}"
        proxmox_network_ip_v4_prefixed: "{{ compute_instance_ip_v4 }}"
      when:
        - compute_instance_ip_v4 != "no"
        - compute_instance_ip_v6_is == "ip"

    - name: IP given - lookup prefix address and and set network config as facts (v6)
      ansible.builtin.set_fact:
        proxmox_network_prefix_v6_full: "{{ compute_instance_ip_v6 | ansible.utils.ipaddr('network/prefix') }}"
        proxmox_network_ip_v6_prefixed: "{{ compute_instance_ip_v6 }}"
      when:
        - compute_instance_ip_v6 != "no"
        - compute_instance_ip_v6_is == "ip"

    - name: Netbox - query for vlan of prefix (v4)
      ansible.builtin.set_fact:
        compute_instance_vlan: "{{ item.item.value.vlan.vid }}"
      loop: "{{ netbox_result_prefix_v4.results }}"
      when:
        - compute_instance_ip_v4 != "no"
        - compute_instance_vlan is undefined
        - netbox_query_vlan_from_prefix
        - item.item.value.vlan.vid is defined

    - name: Netbox - query for vlan of prefix (v6)
      ansible.builtin.set_fact:
        compute_instance_vlan: "{{ item.item.value.vlan.vid }}"
      loop: "{{ netbox_result_prefix_v6.results }}"
      when:
        - compute_instance_ip_v6 != "no"
        - compute_instance_vlan is undefined
        - netbox_query_vlan_from_prefix
        - item.item.value.vlan.vid is defined

    - name: Set compute_instance_bridge (from variable)
      ansible.builtin.set_fact:
        proxmox_net0: "virtio,bridge={{ compute_instance_bridge }}"
      when:
        - netbox_bridge_query_method == "variable"

    - name: Set compute_instance_bridge from query to netbox via custom field (FIXME untested)
      ansible.builtin.set_fact:
        # proxmox_net0: "virtio,bridge={{ query('netbox.netbox.nb_lookup', 'custom-fields', api_filter=netbox_api_query_filter, api_endpoint=netbox_url, token=netbox_token, validate_certs=netbox_validate_certs) | length > 0 }}"
        # FIXME: use var "netbox_bridge_query_term"!
        proxmox_net0: "virtio,bridge={{ netbox_result_prefix_v4.value.custom_fields.bridge }}"
      vars:
        netbox_api_query_filter: "name={{ netbox_bridge_query_term }}"
      when:
        - netbox_bridge_query_method == "custom_field"

    - name: Debug - Show proxmox_net0 and proxmox_network_prefix_v4_full
      ansible.builtin.debug:
        msg: "proxmox_net0: {{ proxmox_net0 }} and proxmox_network_prefix_v4_full is {{ proxmox_network_prefix_v4_full }}"
      when:
        - compute_instance_debug_mode_enable
        - proxmox_network_prefix_v4_full is defined

    - name: Debug - Show proxmox_net0 and proxmox_network_prefix_v6_full
      ansible.builtin.debug:
        msg: "proxmox_net0: {{ proxmox_net0 }} and proxmox_network_prefix_v6_full is {{ proxmox_network_prefix_v6_full }}"
      when:
        - compute_instance_debug_mode_enable
        - proxmox_network_prefix_v6_full is defined

    - name: Netbox - IP given query for existing entry and fail if it exists (v4)
      ansible.builtin.fail:
        msg: "{{ proxmox_network_ip_v4_prefixed }} is already present in prefix {{ proxmox_network_prefix_v4_full }}"
      when:
        - netbox_fail_if_ip_entry_exists
        - compute_instance_ip_v4 != "no"
        - proxmox_network_ip_v4_prefixed is defined
        - query('netbox.netbox.nb_lookup', 'ip-addresses', api_filter=netbox_api_query_filter, api_endpoint=netbox_url, token=netbox_token, validate_certs=netbox_validate_certs) | length > 0
      vars:
        netbox_api_query_filter: "parent={{ proxmox_network_prefix_v4_full }} address={{ proxmox_network_ip_v4_prefixed }}"

    - name: Netbox - IP given query for existing entry and fail if it exists (v6)
      ansible.builtin.fail:
        msg: "{{ proxmox_network_ip_v6_prefixed }} is already present in prefix {{ proxmox_network_prefix_v6_full }}"
      when:
        - netbox_fail_if_ip_entry_exists
        - compute_instance_ip_v6 != "no"
        - proxmox_network_ip_v6_prefixed is defined
        - query('netbox.netbox.nb_lookup', 'ip-addresses', api_filter=netbox_api_query_filter, api_endpoint=netbox_url, token=netbox_token, validate_certs=netbox_validate_certs) | length > 0
      vars:
        netbox_api_query_filter: "parent={{ proxmox_network_prefix_v6_full }} address={{ proxmox_network_ip_v6_prefixed }}"

    - name: Netbox - create VM entry
      netbox.netbox.netbox_virtual_machine:
        netbox_url: "{{ netbox_url }}"
        netbox_token: "{{ netbox_token }}"
        data:
          name: "{{ compute_instance_hostname }}"
          cluster: "{{ proxmox_cluster_name }}"
          vcpus: "{{ compute_instance_cores }}"
          # in MB:
          memory: "{{ compute_instance_memory_max }}"
          # in GB:
          disk: "{{ compute_instance_disksize }}"
        state: present
      register: created_vm

    - name: Netbox - create interface for VM
      netbox.netbox.netbox_vm_interface:
        netbox_url: "{{ netbox_url }}"
        netbox_token: "{{ netbox_token }}"
        data:
          # FIXME make name scheme configurable:
          name: "{{ compute_instance_hostname }}-eth0"
          virtual_machine: "{{ compute_instance_hostname }}"
        state: present
      register: created_interface

    - name: Netbox - create VM with next available v4
      netbox.netbox.netbox_ip_address:
        netbox_url: "{{ netbox_url }}"
        netbox_token: "{{ netbox_token }}"
        data:
          prefix: "{{ proxmox_network_prefix_v4_full }}"
          dns_name: "{{ compute_instance_hostname }}"
          assigned_object:
            virtual_machine: "{{ compute_instance_hostname }}"
            # FIXME make name scheme configurable:
            name: "{{ compute_instance_hostname }}-eth0"
          status: active
        state: new
      when:
        - compute_instance_ip_v4 != "no"
        - proxmox_network_ip_v4_prefixed is undefined
        - compute_instance_ip_v4_is == "name"
      register: my_ip_v4

    - name: Netbox - create VM with next available v6
      netbox.netbox.netbox_ip_address:
        netbox_url: "{{ netbox_url }}"
        netbox_token: "{{ netbox_token }}"
        data:
          prefix: "{{ proxmox_network_prefix_v6_full }}"
          dns_name: "{{ compute_instance_hostname }}"
          assigned_object:
            virtual_machine: "{{ compute_instance_hostname }}"
            # FIXME make name scheme configurable:
            name: "{{ compute_instance_hostname }}-eth0"
          status: active
        state: new
      when:
        - compute_instance_ip_v6 != "no"
        - proxmox_network_ip_v6_prefixed is undefined
        - compute_instance_ip_v6_is == "name"
      register: my_ip_v6

    - name: Netbox - set new assigned IP as proxmox_network_ip_v4_prefixed # no-handler
      ansible.builtin.set_fact:
        proxmox_network_ip_v4_prefixed: "{{ my_ip_v4.ip_address.address }}"
      when:
        - my_ip_v4.changed

    - name: Netbox - set new assigned IP as proxmox_network_ip_v6_prefixed # no-handler
      ansible.builtin.set_fact:
        proxmox_network_ip_v6_prefixed: "{{ my_ip_v6.ip_address.address }}"
      when:
        - my_ip_v6.changed

    - name: Netbox - create VM with given IPv4
      netbox.netbox.netbox_ip_address:
        netbox_url: "{{ netbox_url }}"
        netbox_token: "{{ netbox_token }}"
        data:
          address: "{{ proxmox_network_ip_v4_prefixed }}"
          dns_name: "{{ compute_instance_hostname }}"
          assigned_object:
            virtual_machine: "{{ compute_instance_hostname }}"
            # FIXME make name configurable
            name: "{{ compute_instance_hostname }}-eth0"
          status: active
      when:
        - compute_instance_ip_v4 != "no"
        - compute_instance_ip_v4_is == "ip"

    - name: Netbox - create VM with given IPv6
      netbox.netbox.netbox_ip_address:
        netbox_url: "{{ netbox_url }}"
        netbox_token: "{{ netbox_token }}"
        data:
          address: "{{ proxmox_network_ip_v6_prefixed }}"
          dns_name: "{{ compute_instance_hostname }}"
          assigned_object:
            virtual_machine: "{{ compute_instance_hostname }}"
            # FIXME make name configurable
            name: "{{ compute_instance_hostname }}-eth0"
          status: active
      when:
        - compute_instance_ip_v6 != "no"
        - compute_instance_ip_v6_is == "ip"

    #- name: Show gateway v4
    #  ansible.builtin.debug:
    #    msg: "{{ item.item.value.custom_fields.default_rtr }}"
    #  loop: "{{ netbox_result_prefix_v4.results }}"

    - name: Netbox - query for IPv4 gateway via custom field FIXME use var netbox_gateway_query_term
      ansible.builtin.set_fact:
        # working:
        proxmox_network_gateway_v4: "{{ 'item.item.value.custom_fields.default_rtr' }}"
        # proxmox_network_gateway_v4: "{{ vars['item.item.value.custom_fields.' + netbox_gateway_query_term] }}"
        # proxmox_network_gateway_v4: "{{ lookup('vars', 'item.item.value.custom_fields.' + netbox_gateway_query_term) }}"
        # proxmox_network_gateway_v4: "{{ item.item.value.custom_fields. + vars[netbox_gateway_query_term] }}"
        # proxmox_network_gateway_v4: "{{ 'item.item.value.custom_fields.' + netbox_gateway_query_term }}"
        # proxmox_network_gateway_v4: "{{ lookup('vars', netbox_query_gateway_v4) }}"
#      vars:
#        - netbox_query_gateway_v4: "{{ 'item.item.value.custom_fields.' + netbox_gateway_query_term }}"
      loop: "{{ netbox_result_prefix_v4.results }}"
      when:
        - compute_instance_ip_v4 != "no"
        - netbox_gateway_query_method == 'netbox_custom_field'

    - name: Netbox - query for IPv6 gateway via custom field FIXME use var netbox_gateway_query_term
      ansible.builtin.set_fact:
        proxmox_network_gateway_v6: "{{ item.item.value.custom_fields.default_rtr }}"
      loop: "{{ netbox_result_prefix_v6.results }}"
      when:
        - compute_instance_ip_v6 != "no"
        - netbox_gateway_query_method == 'netbox_custom_field'

    - name: Netbox - query for IPv4 gateway via tag defined in netbox_gateway_query_term # ignore-errors
      ansible.builtin.set_fact:
        my_gateway_v4: "{{ query('netbox.netbox.nb_lookup', 'ip-addresses', api_filter=netbox_api_query_filter, api_endpoint=netbox_url, token=netbox_token, validate_certs=netbox_validate_certs) }}"
      vars:
        netbox_api_query_filter: "parent={{ proxmox_network_prefix_v4_full }} tag={{ netbox_gateway_query_term }}"
      # asking for non-existing tags results in task failure :-/
      ignore_errors: true
      when:
        - compute_instance_ip_v4 != "no"
        - netbox_gateway_query_method == 'netbox_tag'

    - name: Netbox - query for IPv6 gateway via tag defined in netbox_gateway_query_term # ignore-errors
      ansible.builtin.set_fact:
        my_gateway_v6: "{{ query('netbox.netbox.nb_lookup', 'ip-addresses', api_filter=netbox_api_query_filter, api_endpoint=netbox_url, token=netbox_token, validate_certs=netbox_validate_certs) }}"
      vars:
        netbox_api_query_filter: "parent={{ proxmox_network_prefix_v6_full }} tag={{ netbox_gateway_query_term }}"
      # asking for non-existing tags results in task failure :-/
      ignore_errors: true
      when:
        - compute_instance_ip_v6 != "no"
        - netbox_gateway_query_method == 'netbox_tag'

    - name: Netbox - set IPv4 gateway from results
      ansible.builtin.set_fact:
        proxmox_network_gateway_v4: "{{ item.value.address | ansible.utils.ipaddr('address') }}"
      loop: "{{ my_gateway_v4 }}"
      when:
        - my_gateway_v4 is defined
        # FIXME make it work for all methods
        - netbox_gateway_query_method == 'netbox_tag'


    - name: Netbox - set IPv6 gateway from results
      ansible.builtin.set_fact:
        proxmox_network_gateway_v6: "{{ item.value.address | ansible.utils.ipaddr('address') }}"
      loop: "{{ my_gateway_v6 }}"
      when:
        - my_gateway_v6 is defined
        # FIXME make it work for all methods
        - netbox_gateway_query_method == 'netbox_tag'
