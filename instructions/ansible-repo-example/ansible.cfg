[defaults]

# basic information: ansible-inventory --graph
# full information with vars: ./library/kvasir_inventory.py
inventory = hosts
remote_user = root
#private_key_file = ~/.ssh/id_rsa

# vault
# handling: "ansible-vault view|edit|rekey vault.yml"
# vault_file = vault.yml
#vault_password_file = ~/.vault-pass

# format of string {{ ansible_managed }} available within Jinja2:
# ansible_managed = Ansible managed: {file} modified on %Y-%m-%d %H:%M:%S on {host}
ansible_managed = Ansible managed: {file} manual changes might be overridden!

gathering = smart
fact_caching = jsonfile
fact_caching_timeout = 86400
fact_caching_connection = /tmp/ansible_facts

# Human-readable output
#action_warnings = True
stdout_callback = yaml
#bin_ansible_callbacks = True
display_skipped_hosts = no
pipelining = true

## Debugging
#stdout_callback = anstomlog
#callback_plugins = ./callbacks
### Silence
#retry_files_enabled = false

## Performance
# Identify slow tasks with callback plugins
# A specific task in a playbook might look simple, but it can be why the playbook is executing slowly.
# You can enable callback plugins such as timer, profile_tasks, and profile_roles to find a task's time consumption and identify which jobs are slowing down your plays.
#callbacks_enabled = timer, profile_tasks, profile_roles

# Ansible uses batches for task execution, which are controlled by a parameter called forks.
# The default value for forks is 5, which means Ansible executes a task on the first five hosts, waits for the task to complete, and then takes the next batch of five hosts, and so on.
# Once all hosts finish the task, Ansible moves to the next tasks with a batch of five hosts again.
#forks = 50
forks = 10

# By default, Ansible checks and verifies SSH host keys to safeguard against server spoofing and man-in-the-middle attacks.
# This also consumes time. If your environment contains immutable managed nodes (virtual machines or containers), then the key is different when the host is reinstalled or recreated.
# You can disable host key checking for such environments by adding the host_key_checking parameter in your ansible.cfg file and setting it to False:
host_key_checking=False

[inventory]
cache = yes
cache_connection = ./tmp/ansible_inventory

[ssh_connection]
# ControlMaster allows multiple simultaneous SSH sessions with a remote host to use a single network connection.
# This saves time on an SSH connection's initial processes because later SSH sessions use the first SSH connection for task execution.
# ControlPersist indicates how long the SSH keeps an idle connection open in the background.
# For example, ControlPersist=60s keeps the connection idle for 60 seconds:
ssh_args = -o ControlMaster=auto -o ControlPersist=60s -o PreferredAuthentications=publickey

#[inventory]
#cache_plugin=jsonfile

# When Ansible uses SSH, several SSH operations happen in the background for copying files, scripts, and other execution commands.
# You can reduce the number of SSH connections by enabling the pipelining parameter (it's disabled by default) in ansible.cfg:
pipelining = true
